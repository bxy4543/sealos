name: CI

env:
  # Common versions
  GO_VERSION: "1.20"

on:
  workflow_dispatch:
    inputs:
      push_mage:
        description: 'Push images'
        required: false
        type: boolean
  push:
    branches: [ "main" ]
    paths-ignore:
      - "docs/**"
      - "**/*.md"
      - "**/*.yaml"
      - "CONTRIBUTORS"
      - "CHANGELOG/**"
      - "controllers/**"
      - "service/**"
      - "webhooks/**"
      - "frontend/**"
  pull_request:
    types:
      - opened
      - synchronize
      - labeled
    branches: [ "*" ]
    paths-ignore:
      - "docs/**"
      - "CHANGELOG/**"
      - "**/*.md"
      - "**/*.yaml"
      - "CONTRIBUTORS"
      - "CHANGELOG/**"
      - "controllers/**"
      - "service/**"
      - "webhooks/**"
      - "frontend/**"

jobs:
  resolve-modules:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'need-e2e-apply-test')  }}
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Resolve Modules
        id: set-matrix
        run: bash ./scripts/resolve-modules.sh .

  golangci-lint:
    needs: [ resolve-modules ]
    runs-on: ubuntu-20.04
    strategy:
      matrix: ${{ fromJson(needs.resolve-modules.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Golang with cache
        uses: magnetikonline/action-golang-cache@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Dependencies
        run: sudo apt update && sudo apt install -y libgpgme-dev libbtrfs-dev libdevmapper-dev

      - name: Run Linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ${{ matrix.workdir }}
          args: "--out-${NO_FUTURE}format colored-line-number"

  build:
    needs: [ golangci-lint ]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        binary: [ sealos, sealctl, lvscare, image-cri-shim ]
        arch: [ arm64, amd64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Golang with cache
        uses: magnetikonline/action-golang-cache@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Dependencies
        if: ${{ (matrix.binary == 'sealos' || matrix.binary == 'sealctl') && matrix.arch == 'arm64' }}
        run: |
          sudo apt update && sudo apt install -y gcc-aarch64-linux-gnu

      - name: Build Binaries
        run: |
          make build BINS=${{ matrix.binary }} PLATFORM=linux_${{ matrix.arch }}

      - name: Save Binaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.binary }}-${{ matrix.arch }}
          path: bin/linux_${{ matrix.arch}}/${{ matrix.binary }}

  docker:
    needs: [ build ]
    runs-on: ubuntu-20.04
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      matrix:
        arch: [ arm64, amd64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Expose git commit data
        uses: rlespinasse/git-commit-data-action@v1

      - name: Download lvscare
        uses: actions/download-artifact@v3
        with:
          name: lvscare-${{ matrix.arch }}
          path: docker/patch

      - name: Download sealctl
        uses: actions/download-artifact@v3
        with:
          name: sealctl-${{ matrix.arch }}
          path: docker/patch

      - name: Download image-cri-shim
        uses: actions/download-artifact@v3
        with:
          name: image-cri-shim-${{ matrix.arch }}
          path: docker/patch

      - name: Download sealos
        uses: actions/download-artifact@v3
        with:
          name: sealos-${{ matrix.arch }}
          path: docker/sealos

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Chmod a+x for docker
        run: |
          chmod a+x docker/sealos/*
          chmod a+x docker/patch/*
          chmod a+x docker/lvscare/*

      - name: Build and Push lvscare Image
        uses: docker/build-push-action@v3
        with:
          context: docker/patch
          file: docker/patch/Dockerfile.build
          push: true
          build-args: Bin=lvscare
          platforms: linux/${{ matrix.arch }}
          tags: localhost:5000/labring/lvscare:${{ env.GIT_COMMIT_SHORT_SHA }}-${{ matrix.arch }}

      - name: Build and Save Cluster Images
        run: scripts/save-cluster-images.sh
        env:
          ARCH: ${{ matrix.arch }}

      - name: Upload Cluster Images
        uses: actions/upload-artifact@v3
        with:
          name: patch-image-${{ matrix.arch }}.tar
          path: patch-${{ matrix.arch }}.tar

      - name: Delete Artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            lvscare-${{ matrix.arch }}
            sealctl-${{ matrix.arch }}
            image-cri-shim-${{ matrix.arch }}
          failOnError: false

  container:
    needs: [ docker ]
    runs-on: ubuntu-20.04
    if: ${{ (github.event_name == 'push') || (inputs.push_mage == true) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare
        id: prepare
        run: |
          TAG=dev
          echo tag_name=${TAG} >> $GITHUB_OUTPUT
      - # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Download sealos
        uses: actions/download-artifact@v3
        with:
          name: sealos-amd64
          path: docker/sealos/bin/sealos-amd64

      - name: Download sealos
        uses: actions/download-artifact@v3
        with:
          name: sealos-arm64
          path: docker/sealos/bin/sealos-arm64

      - name: Download patch
        uses: actions/download-artifact@v3
        with:
          name: patch-image-amd64.tar
          path: docker/patch

      - name: Download patch
        uses: actions/download-artifact@v3
        with:
          name: patch-image-arm64.tar
          path: docker/patch

      - name: build (and publish) main sealos image
        env:
          # fork friendly ^^
          DOCKER_REPO: ghcr.io/${{ github.repository_owner }}/sealos
        working-directory: docker/sealos
        run: |
          docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --label "org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/sealos" \
          --label "org.opencontainers.image.description=sealos  container image" \
          --label "org.opencontainers.image.licenses=MIT" \
          --push \
          -t ${DOCKER_REPO}:${{ steps.prepare.outputs.tag_name }} \
          -f Dockerfile.main \
          .

  patch-oci:
    needs: [ docker ]
    runs-on: ubuntu-20.04
    if: ${{ (github.event_name == 'push') || (inputs.push_mage == true) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Expose git commit data
        uses: rlespinasse/git-commit-data-action@v1

      - name: Prepare
        id: prepare
        run: |
          TAG=dev
          echo tag_name=${TAG} >> $GITHUB_OUTPUT
          echo commit_sha=${{ env.GIT_COMMIT_SHORT_SHA }} >> $GITHUB_OUTPUT

      - name: Download patch
        uses: actions/download-artifact@v3
        with:
          name: patch-image-amd64.tar
          path: docker/patch

      - name: Download patch
        uses: actions/download-artifact@v3
        with:
          name: patch-image-arm64.tar
          path: docker/patch

      - name: build (and publish) main patch image
        env:
          # fork friendly ^^
          DOCKER_REPO: ghcr.io/${{ github.repository_owner }}/sealos-patch
        working-directory: docker/patch
        run: |
          set -x
          sudo apt remove buildah -y || true
          readonly binDIR="/tmp/$(whoami)/bin"
          wget -qO "buildah" "https://github.com/labring/cluster-image/releases/download/depend/buildah.linux.amd64"
          mkdir -p $binDIR
          mv buildah $binDIR/
          sudo chmod a+x $binDIR/buildah
          sudo $binDIR/buildah images
          BEFORE_IMAGE_NAME=ghcr.io/labring/sealos-merge-patch:${{ steps.prepare.outputs.commit_sha }}
          IMAGE_NAME=${DOCKER_REPO}:${{ steps.prepare.outputs.tag_name }}
          sudo $binDIR/buildah login -u "${{ github.repository_owner }}" -p "${{ secrets.GH_PAT }}" "ghcr.io"
          sudo $binDIR/buildah pull oci-archive:patch-amd64.tar
          sudo $binDIR/buildah tag ${BEFORE_IMAGE_NAME}-amd64 ${IMAGE_NAME}-amd64
          sudo $binDIR/buildah rmi ${BEFORE_IMAGE_NAME}-amd64
          sudo $binDIR/buildah pull oci-archive:patch-arm64.tar
          sudo $binDIR/buildah tag ${BEFORE_IMAGE_NAME}-arm64 ${IMAGE_NAME}-arm64
          sudo $binDIR/buildah rmi ${BEFORE_IMAGE_NAME}-arm64
          sudo $binDIR/buildah images
          sudo $binDIR/buildah push ${IMAGE_NAME}-amd64
          sudo $binDIR/buildah push ${IMAGE_NAME}-arm64
          sudo $binDIR/buildah manifest create ${IMAGE_NAME}
          sudo $binDIR/buildah manifest add "$IMAGE_NAME" docker://"$IMAGE_NAME-amd64"
          sudo $binDIR/buildah manifest add "$IMAGE_NAME" docker://"$IMAGE_NAME-arm64"
          sudo $binDIR/buildah manifest push --all "$IMAGE_NAME" docker://"$IMAGE_NAME" && echo "$IMAGE_NAME push success"
          sudo $binDIR/buildah images

  e2e_apply_test:
    needs: [ docker ]
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.pull_request.labels.*.name, 'need-e2e-apply-test') }}
    strategy:
      matrix:
        arch: [ arm64, amd64 ]
    steps:
      - name: Install Dependencies
        run: sudo apt update && sudo apt install -y libgpgme-dev libbtrfs-dev libdevmapper-dev

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Expose git commit data
        uses: rlespinasse/git-commit-data-action@v1

      - name: Download sealos
        uses: actions/download-artifact@v3
        with:
          name: sealos-${{ matrix.arch }}
          path: /tmp/sealos/bin/

      - name: Download sealos
        uses: actions/download-artifact@v3
        with:
          name: patch-image-${{ matrix.arch }}.tar
          path: /tmp/sealos/images/

      - name: Install ginkgo && Run e2e apply test
        shell: bash
        run: |
          set -ex
          echo "job name: ${{ github.job }}"
          gzip /tmp/sealos/images/patch-${{ matrix.arch }}.tar
          ls -Rl /tmp/sealos
          wget -qO goNew.tgz https://go.dev/dl/go1.20.linux-amd64.tar.gz && tar -zxf goNew.tgz && rm -rf goNew.tgz
          sudo mkdir -p /tmp/golang && sudo mv go /tmp/golang && sudo mkdir -p /opt/gopath/{bin,src,pkg}
          export GOROOT=/tmp/golang/go && export GOPATH=/opt/gopath
          export PATH="$PATH:$GOPATH/bin:$GOROOT/bin"
          echo "SEALOS_E2E_TEST_IMAGE_NAME=hub.sealos.cn/labring/kubernetes:v1.25.6"
          echo "SEALOS_E2E_TEST_PATCH_IMAGE_TAR=/tmp/sealos/images/patch-${{ matrix.arch }}.tar.gz"
          echo "SEALOS_E2E_TEST_PATCH_IMAGE_NAME=ghcr.io/labring/sealos-merge-patch:${{ env.GIT_COMMIT_SHORT_SHA }}-${{ matrix.arch }}"
          echo "SEALOS_E2E_TEST_SEALOS_BIN_PATH=/tmp/sealos/bin/sealos"
          echo "ALIYUN_ACCESS_KEY_ID=${{ secrets.ALIYUN_ACCESS_KEY_ID }}"
          echo "ALIYUN_ACCESS_KEY_SECRET=${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}"
          echo "ALIYUN_RESOURCE_GROUP_ID=${{ secrets.ALIYUN_RESOURCE_GROUP_ID }}"
          echo "ALIYUN_REGION_ID=cn-hangzhou"
          sudo SEALOS_E2E_TEST_IMAGE_NAME="hub.sealos.cn/labring/kubernetes:v1.25.6" \
            SEALOS_E2E_TEST_PATCH_IMAGE_TAR="/tmp/sealos/images/patch-${{ matrix.arch }}.tar.gz" \
            SEALOS_E2E_TEST_PATCH_IMAGE_NAME="ghcr.io/labring/sealos-merge-patch:${{ env.GIT_COMMIT_SHORT_SHA }}-${{ matrix.arch }}" \
            SEALOS_E2E_TEST_SEALOS_BIN_PATH="/tmp/sealos/bin/sealos" \
            ALIYUN_ACCESS_KEY_ID="${{ secrets.ALIYUN_ACCESS_KEY_ID }}" \
            ALIYUN_ACCESS_KEY_SECRET="${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}" \
            ALIYUN_RESOURCE_GROUP_ID="${{ secrets.ALIYUN_RESOURCE_GROUP_ID }}" \
            ALIYUN_REGION_ID=cn-hangzhou /tmp/golang/go/bin/go run github.com/onsi/ginkgo/v2/ginkgo -v --focus="apply test" test/e2e/

  issue_commit:
    needs: [ docker ]
    if: ${{ contains(github.event.pull_request.labels.*.name, 'need-e2e-apply-test') }}
    #    needs:
    #      - e2e_apply_test
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: sleep for wait apply test to complete
        run: sleep 10m
      ## why not use `needs.e2e_apply_test` ? because when e2e_apply_test failed, the `needs.e2e_apply_test` will cause skip this commit steps.
      - name: Wait for comment triggered workflow to complete
        if: ${{ always() }}
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-check
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "e2e_apply_test" # Replace with the name of the job in your comment triggered workflow
          ref: ${{ github.event.pull_request.head.sha }}
          waitFor: '100000000' # milliseconds between check for completion
          timeout: '18000000000' # milliseconds to wait before timing out

      - name: Add comment to PR with test status
        uses: peter-evans/create-or-update-comment@v1
        if: ${{ always() }}
        with:
          issue-number: ${{ github.event.number }}
          comment-author: 'github-actions[bot]'
          repository: ${{ github.repository }}
          body: |
            AUTO COMMIT: E2E Apply Test Result: ${{ needs.e2e_apply_test.conclusion == 'failure' && 'Failure' || 'Success' }} [View Action Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          token: "${{ secrets.GH_PAT }}"